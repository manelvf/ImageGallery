@page "/list"
@using System.Globalization
@using System.Net
@inject IHttpClientFactory HttpClientFactory;
@inject IJSRuntime JS
@rendermode InteractiveServer

<h3>Image List</h3>

@if (deleteError is not null)
{
    <p>Error: @deleteError</p>
}

@if (images == null)
{
    <p>Loading...</p>
}
else if (images.Count == 0)
{
    <p>No components found.</p>
}
else
{
    <ul>
        @foreach (var image in images)
        {
            <li>
                <img src="thumbs/@image.Name" />
                Creation Date: @image.InsertionDate
                <Button @onclick='() => DownloadImageAsync("thumbs", image.Name)' >Thumbnail</Button>
                <Button @onclick='() => DownloadImageAsync("optimized", image.Name)' >Optimized</Button>
                <Button @onclick='() => DownloadImageAsync("uploads", image.Name)' >Original</Button>
                <button @onclick="() => OpenPromptDialog(image.Name)">Delete</button>
            </li>
        }
    </ul>
}

<PromptDialog IsVisible="@_isPromptVisible"
              Title="Delete Image"
              Message="Please enter your password:"
              Placeholder="Your password"
              OnClose="HandlePromptClose"
              OnConfirm="HandlePromptConfirm" />


@code {
    private string deleteError = null;
    
    private bool _isPromptVisible = false;
    private string _name = string.Empty;
    private string _userInput = string.Empty;

    private void OpenPromptDialog(string Name)
    {
        _isPromptVisible = true;
        _name = Name;
    }

    private void HandlePromptClose()
    {
        _isPromptVisible = false;
        Console.WriteLine("Prompt dialog was cancelled");
    }

    private async void HandlePromptConfirm(string inputValue)
    {
        _isPromptVisible = false;
        _userInput = inputValue;

        try
        {
            var httpClient = HttpClientFactory.CreateClient("APIClient");
            var response = await httpClient.DeleteAsync($"api/remove?name={_name}&password={_userInput}");

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("File deleted successfully");
                deleteError = null;
                await RetrieveImages();
            }
            else
            {
                Console.WriteLine("Password wasn't correct");
                deleteError = "Password wasn't correct";
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting image {ex.Message}");
            deleteError = $"Error deleting image {ex.Message}";
        }
        finally
        {
            StateHasChanged();
        }
        
        Console.WriteLine($"Prompt confirmed with value: {inputValue}");
    }
    
    private List<Image> images;
    
    protected override async Task OnInitializedAsync()
    {
        await RetrieveImages();
    }

    protected async Task RetrieveImages()
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient("APIClient");
            images = await httpClient.GetFromJsonAsync<List<Image>>("api/list");
            Console.WriteLine(images);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching images {ex.Message}");
        }
    }


    private class Image
    {
        public string Name { get; set; }
        public string InsertionDate { get; set; }
    }

    private async Task DownloadImageAsync(string FolderPath, string ImageName)
    {
        try
        {
            var dataPath = Path.Combine("data", FolderPath);
            var imagePath = Path.Combine(dataPath, ImageName);

            if (!File.Exists(imagePath))
            {
                throw new FileNotFoundException($"Image {ImageName} not found at path: {imagePath}");
            }

            // Read file bytes
            byte[] fileBytes = await File.ReadAllBytesAsync(imagePath);
            
            // Convert to base64
            string base64 = Convert.ToBase64String(fileBytes);
            
            // Get MIME type
            string mimeType = GetMimeType(Path.GetExtension(ImageName));
            
            // Create data URL
            string dataUrl = $"data:{mimeType};base64,{base64}";

            // Use JS interop to trigger download
            await JS.InvokeVoidAsync("downloadFromDataUrl", dataUrl, $"{FolderPath}_{ImageName}");
        }
        catch (Exception ex)
        {
            // Handle error appropriately
            Console.Error.WriteLine($"Error downloading image: {ex.Message}");
            // You might want to surface this error to the UI
        }
        finally
        {
            StateHasChanged();
        }
    }

    private string GetMimeType(string extension)
    {
        return extension.ToLower() switch
        {
            ".jpg" or ".jpeg" => "image/jpeg",
            ".png" => "image/png",
            ".gif" => "image/gif",
            ".bmp" => "image/bmp",
            ".webp" => "image/webp",
            _ => "application/octet-stream"
        };
    }
}
    