@page "/upload"
@using System.Net
@using System.Data.SQLite
@using System.Security.Cryptography
@using System.Text
@inject IHttpClientFactory HttpClientFactory;
@rendermode InteractiveServer

<h3>Upload Form</h3>

<div class="upload-form">
    <label for="fileInput">Select a file to upload:</label>
    <InputFile OnChange="OnFileSelected" />

    <div class="file-preview" style="margin-top: 10px;">
    </div>

    <button @onclick="UploadFiles" class="btn btn-primary" disabled="@(fileSelected is null)">
        Upload
    </button>

    @if (!string.IsNullOrEmpty(uploadStatus))
    {
        <p>@uploadStatus</p>
    }
</div>

@code {
    private Microsoft.AspNetCore.Components.Forms.IBrowserFile fileSelected;
    private string uploadStatus;

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        fileSelected = e.File;
    }

    private async Task UploadFiles()
    {
        uploadStatus = "Uploading...";
        StateHasChanged();

        try
        {
            var file = fileSelected;
            using var content = new MultipartFormDataContent();
            var fileStream = file.OpenReadStream(maxAllowedSize:3 * 1024 * 1024);
            var streamContent = new StreamContent(fileStream);
            content.Add(streamContent, "file", file.Name);

            var httpClient = HttpClientFactory.CreateClient("APIClient");
            var response = await httpClient.PostAsync("api/upload", content);
            if (response.IsSuccessStatusCode)
            {
                string code = await response.Content.ReadAsStringAsync();
                uploadStatus = $"File {file.Name} uploaded successfully! Code is {code}";
                
                InsertImage(file.Name, code);
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                uploadStatus = $"Failed to upload {file.Name}. Error: {errorMessage}";
            }
        }
        catch (Exception ex)
        {
            uploadStatus = $"Upload failed: {ex.Message}";
        }

        StateHasChanged();
    }

    private void InsertImage(string Name, string Password)
    {
        string insertQuery = "INSERT INTO Images (Name, Password, InsertionDate) VALUES (@Name, @Password, DATETIME('now'));";

        string connectionString = "Data Source=images.db;Version=3;";

        string hashedPassword = HashPassword(Password);
        
        using (var connection = new SQLiteConnection(connectionString))
        {
            connection.Open();
            using (var command = new SQLiteCommand(insertQuery, connection))
            {
                command.Parameters.AddWithValue("@Name", Name);
                command.Parameters.AddWithValue("@Password", hashedPassword);
                command.ExecuteNonQuery();
                Console.WriteLine("Data inserted successfully.");
            }
        }
    }
        
    private string HashPassword(string password)
    {
        using var sha256 = SHA256.Create();
        byte[] hashBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(password));
        return Convert.ToBase64String(hashBytes); // Store the hash as Base64
    }
        
}
